name: sscs-ccd-definitions pipeline

variables:
  serviceConnection: 'azurerm-prod'
  repositoryBenefit: sscs/ccd-definition-importer-benefit
  repositoryBulkscan: sscs/ccd-definition-importer-bulkscan
  acrName: hmctspublic
  acrResourceGroup: rpe-acr-prod-rg

trigger:
  branches:
    include:
      - refs/tags/*

pr:
  branches:
    include:
      - master

jobs:
  - job: Test
    displayName: 'Test the JSON will build successfully into an Excel definitions file'
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          cd benefit
          docker build -f ../docker/importer.Dockerfile -t test-image .
          docker run --rm test-image sh -c "cd /opt/ccd-definition-processor && yarn json2xlsx -D /data/sheets -o /sscs-ccd.xlsx"
          cd ../bulkscan
          docker build -f ../docker/importer.Dockerfile -t test-image .
          docker run --rm test-image sh -c "cd /opt/ccd-definition-processor && yarn json2xlsx -D /data/sheets -o /sscs-ccd.xlsx"
          cd ..
  - job: Release
    displayName: 'Build and Push Docker Images to ACR'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/')) # TAGS ONLY
    dependsOn: Test
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - powershell: |
          Write-Host ("##vso[task.setvariable variable=imageTagBenefit;]$((Get-Content benefit/VERSION.yaml -Raw) -replace 'TAG: ','')")
          Write-Host ("##vso[task.setvariable variable=imageTagBulkscan;]$((Get-Content bulkscan/VERSION.yaml -Raw) -replace 'TAG: ','')")
      - task: AzureCLI@1
        inputs:
          failOnStandardError: false  # does not work with AzureCLI task
          azureSubscription: $(serviceConnection)
          scriptLocation: 'inlineScript'
          inlineScript: |
            set -e
            cd benefit
            # "|| true" because we don't want script to exit here when return code from az acr is "1"
            response=$(az acr repository show-tags -n $(acrName) --repository $(repositoryBenefit) | grep $(imageTagBenefit)) || true
            if [ -z "$response" ]; then
              echo "Building $(repositoryBenefit):$(imageTagBenefit) ..."
              az acr build -r $(acrName) -t $(repositoryBenefit):$(imageTagBenefit) -g $(acrResourceGroup) -f ../docker/importer.Dockerfile .
              az acr repository update --name $(acrName) --image $(repositoryBenefit):$(imageTagBenefit) --delete-enabled false --write-enabled false
            else
              echo "$(repositoryBenefit):$(imageTagBenefit) already exists"
            fi
            cd ../bulkscan
            response=$(az acr repository show-tags -n $(acrName) --repository $(repositoryBulkscan) | grep $(imageTagBulkscan)) || true
            if [ -z "$response" ]; then
              echo "Building $(repositoryBulkscan):$(imageTagBulkscan) ..."
              az acr build -r $(acrName) -t $(repositoryBulkscan):$(imageTagBulkscan) -g $(acrResourceGroup) -f ../docker/importer.Dockerfile .
              az acr repository update --name $(acrName) --image $(repositoryBulkscan):$(imageTagBulkscan) --delete-enabled false --write-enabled false
            else
              echo "$(repositoryBulkscan):$(imageTagBulkscan) already exists"
            fi
            echo "Finished"
